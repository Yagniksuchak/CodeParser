 
+/** Initialize the global hash containing all MDL locks. */
+
+void MDL_map::init()
+{
+  pthread_mutex_init(&m_mutex, NULL);
+  my_hash_init(&m_locks, &my_charset_bin, 16 /* FIXME */, 0, 0,
+               mdl_locks_key, 0, 0);
+}
+
+
 /**
-  Initialize a metadata locking context.
+  Destroy the global hash containing all MDL locks.
+  @pre It must be empty.
+*/
 
-  This is to be called when a new server connection is created.
+void MDL_map::destroy()
+{
+  DBUG_ASSERT(!m_locks.records);
+  pthread_mutex_destroy(&m_mutex);
+  my_hash_free(&m_locks);
+}
+
+
+/**
+  Find MDL_lock object corresponding to the key, create it
+  if it does not exist.
+
+  @retval non-NULL - Success. MDL_lock instance for the key with
+                     locked MDL_lock::m_mutex.
+  @retval NULL     - Failure (OOM).
+*/
+
+MDL_lock* MDL_map::find_or_insert(const MDL_key *mdl_key)
+{
+  MDL_lock *lock;
+
+retry:
+  pthread_mutex_lock(&m_mutex);
+  if (!(lock= (MDL_lock*) my_hash_search(&m_locks,
+                                         mdl_key->ptr(),
+                                         mdl_key->length())))
+  {
+    lock= MDL_lock::create(mdl_key);
+    if (!lock || my_hash_insert(&m_locks, (uchar*)lock))
+    {
+      pthread_mutex_unlock(&m_mutex);
+      MDL_lock::destroy(lock);
+      return NULL;
+    }
+  }
+
+  if (move_from_hash_to_lock_mutex(lock))
+    goto retry;
+
+  return lock;
+}
+
+
+/**
+  Find MDL_lock object corresponding to the key.
+
+  @retval non-NULL - MDL_lock instance for the key with locked
+                     MDL_lock::m_mutex.
+  @retval NULL     - There was no MDL_lock for the key.
+*/
+
+MDL_lock* MDL_map::find(const MDL_key *mdl_key)
+{
+  MDL_lock *lock;
+
+retry:
+  pthread_mutex_lock(&m_mutex);
+  if (!(lock= (MDL_lock*) my_hash_search(&m_locks,
+                                         mdl_key->ptr(),
+                                         mdl_key->length())))
+  {
+    pthread_mutex_unlock(&m_mutex);
+    return NULL;
+  }
+
+  if (move_from_hash_to_lock_mutex(lock))
+    goto retry;
+
+  return lock;
+}
+
+
+/**
+  Release mdl_locks.m_mutex mutex and lock MDL_lock::m_mutex for lock
+  object from the hash. Handle situation when object was released
+  while the held no mutex.
+
+  @retval FALSE - Success.
+  @retval TRUE  - Object was released while we held no mutex, caller
+                  should re-try looking up MDL_lock object in the hash.
 */
 
-void MDL_context::init(THD *thd_arg)
+bool MDL_map::move_from_hash_to_lock_mutex(MDL_lock *lock)
 {
-  m_has_global_shared_lock= FALSE;
-  m_thd= thd_arg;
-  m_lt_or_ha_sentinel= NULL;
+  DBUG_ASSERT(! lock->m_is_destroyed);
+  safe_mutex_assert_owner(&m_mutex);
+
   /*
-    FIXME: In reset_n_backup_open_tables_state,
-    we abuse "init" as a reset, i.e. call it on an already
-    constructed non-empty object. This is why we can't
-    rely here on the default constructors of I_P_List
-    to empty the list.
+    We increment m_ref_usage which is a reference counter protected by
+    mdl_locks.m_mutex under the condition it is present in the hash and
+    m_is_destroyed is FALSE.
   */
-  m_tickets.empty();
-  m_is_waiting_in_mdl= FALSE;
+  lock->m_ref_usage++;
+  pthread_mutex_unlock(&m_mutex);
+
+  pthread_mutex_lock(&lock->m_mutex);
+  lock->m_ref_release++;
+  if (unlikely(lock->m_is_destroyed))
+  {
+    /*
+      Object was released while we held no mutex, we need to
+      release it if no others hold references to it, while our own
+      reference count ensured that the object as such haven't got
+      its memory released yet. We can also safely compare
+      m_ref_usage and m_ref_release since the object is no longer
+      present in the hash so no one will be able to find it and
+      increment m_ref_usage anymore.
+    */
+    uint ref_usage= lock->m_ref_usage;
+    uint ref_release= lock->m_ref_release;
+    pthread_mutex_unlock(&lock->m_mutex);
+    if (ref_usage == ref_release)
+      MDL_lock::destroy(lock);
+    return TRUE;
+  }
+  return FALSE;
+}
+
+
+/**
+  Destroy MDL_lock object or delegate this responsibility to
+  whatever thread that holds the last outstanding reference to
+  it.
+*/
+
+void MDL_map::remove(MDL_lock *lock)
+{
+  uint ref_usage, ref_release;
+
+  safe_mutex_assert_owner(&lock->m_mutex);
+
+  if (lock->cached_object)
+    (*lock->cached_object_release_hook)(lock->cached_object);
+
+  /*
+    Destroy the MDL_lock object, but ensure that anyone that is
+    holding a reference to the object is not remaining, if so he
+    has the responsibility to release it.
+
+    Setting of m_is_destroyed to TRUE while holding _both_
+    mdl_locks.m_mutex and MDL_lock::m_mutex mutexes transfers the
+    protection of m_ref_usage from mdl_locks.m_mutex to
+    MDL_lock::m_mutex while removal of object from the hash makes
+    it read-only.  Therefore whoever acquires MDL_lock::m_mutex next
+    will see most up to date version of m_ref_usage.
+
+    This means that when m_is_destroyed is TRUE and we hold the
+    MDL_lock::m_mutex we can safely read the m_ref_usage
+    member.
+  */
+  pthread_mutex_lock(&m_mutex);
+  my_hash_delete(&m_locks, (uchar*) lock);
+  lock->m_is_destroyed= TRUE;
+  ref_usage= lock->m_ref_usage;
+  ref_release= lock->m_ref_release;
+  pthread_mutex_unlock(&lock->m_mutex);
+  pthread_mutex_unlock(&m_mutex);
+  if (ref_usage == ref_release)
+    MDL_lock::destroy(lock);
+}
+
+
+/**
+  Initialize a metadata locking context.
+
+  This is to be called when a new server connection is created.
+*/
+
+MDL_context::MDL_context()
+  :m_lt_or_ha_sentinel(NULL),
+  m_thd(NULL)
+{
+  pthread_cond_init(&m_ctx_wakeup_cond, NULL);
 }